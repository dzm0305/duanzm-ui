{"remainingRequest":"/Users/duanzhimin/Java/MyWorkspaces/duanzm-ui/node_modules/babel-loader/lib/index.js!/Users/duanzhimin/Java/MyWorkspaces/duanzm-ui/node_modules/eslint-loader/index.js??ref--13-0!/Users/duanzhimin/Java/MyWorkspaces/duanzm-ui/src/utils/dict/Dict.js","dependencies":[{"path":"/Users/duanzhimin/Java/MyWorkspaces/duanzm-ui/src/utils/dict/Dict.js","mtime":1632740083000},{"path":"/Users/duanzhimin/Java/MyWorkspaces/duanzm-ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/duanzhimin/Java/MyWorkspaces/duanzm-ui/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/duanzhimin/Java/MyWorkspaces/duanzm-ui/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKdmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKCIvVXNlcnMvZHVhbnpoaW1pbi9KYXZhL015V29ya3NwYWNlcy9kdWFuem0tdWkvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0IikuZGVmYXVsdDsKCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKICB2YWx1ZTogdHJ1ZQp9KTsKZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwOwoKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lm1hcC5qcyIpOwoKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuZm9yLWVhY2guanMiKTsKCnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nLmpzIik7CgpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLml0ZXJhdG9yLmpzIik7CgpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5pdGVyYXRvci5qcyIpOwoKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZpbmQuanMiKTsKCnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5maWx0ZXIuanMiKTsKCnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5zcGxpY2UuanMiKTsKCnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5jb25jYXQuanMiKTsKCnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy5udW1iZXIubWF4LXNhZmUtaW50ZWdlci5qcyIpOwoKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLm51bWJlci5jb25zdHJ1Y3Rvci5qcyIpOwoKdmFyIF90b0NvbnN1bWFibGVBcnJheTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoIi9Vc2Vycy9kdWFuemhpbWluL0phdmEvTXlXb3Jrc3BhY2VzL2R1YW56bS11aS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy90b0NvbnN1bWFibGVBcnJheSIpKTsKCnZhciBfY2xhc3NDYWxsQ2hlY2syID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCIvVXNlcnMvZHVhbnpoaW1pbi9KYXZhL015V29ya3NwYWNlcy9kdWFuem0tdWkvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2siKSk7Cgp2YXIgX2NyZWF0ZUNsYXNzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgiL1VzZXJzL2R1YW56aGltaW4vSmF2YS9NeVdvcmtzcGFjZXMvZHVhbnptLXVpL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzIikpOwoKdmFyIF92dWUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoInZ1ZSIpKTsKCnZhciBfcnVveWkgPSByZXF1aXJlKCJAL3V0aWxzL3J1b3lpIik7Cgp2YXIgX0RpY3RNZXRhID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCIuL0RpY3RNZXRhIikpOwoKdmFyIF9EaWN0RGF0YSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgiLi9EaWN0RGF0YSIpKTsKCnZhciBERUZBVUxUX0RJQ1RfT1BUSU9OUyA9IHsKICB0eXBlczogW10KfTsKLyoqDQogKiBAY2xhc3NkZXNjIOWtl+WFuA0KICogQHByb3BlcnR5IHtPYmplY3R9IGxhYmVsIOagh+etvuWvueixoe+8jOWGhemDqOWxnuaAp+WQjeS4uuWtl+WFuOexu+Wei+WQjeensA0KICogQHByb3BlcnR5IHtPYmplY3R9IGRpY3Qg5a2X5q615pWw57uE77yM5YaF6YOo5bGe5oCn5ZCN5Li65a2X5YW457G75Z6L5ZCN56ewDQogKiBAcHJvcGVydHkge0FycmF5LjxEaWN0TWV0YT59IF9kaWN0TWV0YXMg5a2X5YW45YWD5pWw5o2u5pWw57uEDQogKi8KCnZhciBEaWN0ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBEaWN0KCkgewogICAgKDAsIF9jbGFzc0NhbGxDaGVjazIuZGVmYXVsdCkodGhpcywgRGljdCk7CiAgICB0aGlzLm93bmVyID0gbnVsbDsKICAgIHRoaXMubGFiZWwgPSB7fTsKICAgIHRoaXMudHlwZSA9IHt9OwogIH0KCiAgKDAsIF9jcmVhdGVDbGFzczIuZGVmYXVsdCkoRGljdCwgW3sKICAgIGtleTogImluaXQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGluaXQob3B0aW9ucykgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgaWYgKG9wdGlvbnMgaW5zdGFuY2VvZiBBcnJheSkgewogICAgICAgIG9wdGlvbnMgPSB7CiAgICAgICAgICB0eXBlczogb3B0aW9ucwogICAgICAgIH07CiAgICAgIH0KCiAgICAgIHZhciBvcHRzID0gKDAsIF9ydW95aS5tZXJnZVJlY3Vyc2l2ZSkoREVGQVVMVF9ESUNUX09QVElPTlMsIG9wdGlvbnMpOwoKICAgICAgaWYgKG9wdHMudHlwZXMgPT09IHVuZGVmaW5lZCkgewogICAgICAgIHRocm93IG5ldyBFcnJvcignbmVlZCBkaWN0IHR5cGVzJyk7CiAgICAgIH0KCiAgICAgIHZhciBwcyA9IFtdOwogICAgICB0aGlzLl9kaWN0TWV0YXMgPSBvcHRzLnR5cGVzLm1hcChmdW5jdGlvbiAodCkgewogICAgICAgIHJldHVybiBfRGljdE1ldGEuZGVmYXVsdC5wYXJzZSh0KTsKICAgICAgfSk7CgogICAgICB0aGlzLl9kaWN0TWV0YXMuZm9yRWFjaChmdW5jdGlvbiAoZGljdE1ldGEpIHsKICAgICAgICB2YXIgdHlwZSA9IGRpY3RNZXRhLnR5cGU7CgogICAgICAgIF92dWUuZGVmYXVsdC5zZXQoX3RoaXMubGFiZWwsIHR5cGUsIHt9KTsKCiAgICAgICAgX3Z1ZS5kZWZhdWx0LnNldChfdGhpcy50eXBlLCB0eXBlLCBbXSk7CgogICAgICAgIGlmIChkaWN0TWV0YS5sYXp5KSB7CiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICBwcy5wdXNoKGxvYWREaWN0KF90aGlzLCBkaWN0TWV0YSkpOwogICAgICB9KTsKCiAgICAgIHJldHVybiBQcm9taXNlLmFsbChwcyk7CiAgICB9CiAgICAvKioNCiAgICAgKiDph43mlrDliqDovb3lrZflhbgNCiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdHlwZSDlrZflhbjnsbvlnosNCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAicmVsb2FkRGljdCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVsb2FkRGljdCh0eXBlKSB7CiAgICAgIHZhciBkaWN0TWV0YSA9IHRoaXMuX2RpY3RNZXRhcy5maW5kKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgcmV0dXJuIGUudHlwZSA9PT0gdHlwZTsKICAgICAgfSk7CgogICAgICBpZiAoZGljdE1ldGEgPT09IHVuZGVmaW5lZCkgewogICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdCgidGhlIGRpY3QgbWV0YSBvZiAiLmNvbmNhdCh0eXBlLCAiIHdhcyBub3QgZm91bmQiKSk7CiAgICAgIH0KCiAgICAgIHJldHVybiBsb2FkRGljdCh0aGlzLCBkaWN0TWV0YSk7CiAgICB9CiAgfV0pOwogIHJldHVybiBEaWN0Owp9KCk7Ci8qKg0KICog5Yqg6L295a2X5YW4DQogKiBAcGFyYW0ge0RpY3R9IGRpY3Qg5a2X5YW4DQogKiBAcGFyYW0ge0RpY3RNZXRhfSBkaWN0TWV0YSDlrZflhbjlhYPmlbDmja4NCiAqIEByZXR1cm5zIHtQcm9taXNlfQ0KICovCgoKZXhwb3J0cy5kZWZhdWx0ID0gRGljdDsKCmZ1bmN0aW9uIGxvYWREaWN0KGRpY3QsIGRpY3RNZXRhKSB7CiAgcmV0dXJuIGRpY3RNZXRhLnJlcXVlc3QoZGljdE1ldGEpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICB2YXIgX2RpY3QkdHlwZSR0eXBlOwoKICAgIHZhciB0eXBlID0gZGljdE1ldGEudHlwZTsKICAgIHZhciBkaWN0cyA9IGRpY3RNZXRhLnJlc3BvbnNlQ29udmVydGVyKHJlc3BvbnNlLCBkaWN0TWV0YSk7CgogICAgaWYgKCEoZGljdHMgaW5zdGFuY2VvZiBBcnJheSkpIHsKICAgICAgY29uc29sZS5lcnJvcigndGhlIHJldHVybiBvZiByZXNwb25zZUNvbnZlcnRlciBtdXN0IGJlIEFycmF5LjxEaWN0RGF0YT4nKTsKICAgICAgZGljdHMgPSBbXTsKICAgIH0gZWxzZSBpZiAoZGljdHMuZmlsdGVyKGZ1bmN0aW9uIChkKSB7CiAgICAgIHJldHVybiBkIGluc3RhbmNlb2YgX0RpY3REYXRhLmRlZmF1bHQ7CiAgICB9KS5sZW5ndGggIT09IGRpY3RzLmxlbmd0aCkgewogICAgICBjb25zb2xlLmVycm9yKCd0aGUgdHlwZSBvZiBlbGVtZW50cyBpbiBkaWN0cyBtdXN0IGJlIERpY3REYXRhJyk7CiAgICAgIGRpY3RzID0gW107CiAgICB9CgogICAgKF9kaWN0JHR5cGUkdHlwZSA9IGRpY3QudHlwZVt0eXBlXSkuc3BsaWNlLmFwcGx5KF9kaWN0JHR5cGUkdHlwZSwgWzAsIE51bWJlci5NQVhfU0FGRV9JTlRFR0VSXS5jb25jYXQoKDAsIF90b0NvbnN1bWFibGVBcnJheTIuZGVmYXVsdCkoZGljdHMpKSk7CgogICAgZGljdHMuZm9yRWFjaChmdW5jdGlvbiAoZCkgewogICAgICBfdnVlLmRlZmF1bHQuc2V0KGRpY3QubGFiZWxbdHlwZV0sIGQudmFsdWUsIGQubGFiZWwpOwogICAgfSk7CiAgICByZXR1cm4gZGljdHM7CiAgfSk7Cn0="},{"version":3,"sources":["/Users/duanzhimin/Java/MyWorkspaces/duanzm-ui/src/utils/dict/Dict.js"],"names":["DEFAULT_DICT_OPTIONS","types","Dict","owner","label","type","options","Array","opts","undefined","Error","ps","_dictMetas","map","t","DictMeta","parse","forEach","dictMeta","Vue","set","lazy","push","loadDict","Promise","all","find","e","reject","dict","request","then","response","dicts","responseConverter","console","error","filter","d","DictData","length","splice","Number","MAX_SAFE_INTEGER","value"],"mappings":"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","sourcesContent":["import Vue from 'vue'\r\nimport { mergeRecursive } from \"@/utils/ruoyi\";\r\nimport DictMeta from './DictMeta'\r\nimport DictData from './DictData'\r\n\r\nconst DEFAULT_DICT_OPTIONS = {\r\n  types: [],\r\n}\r\n\r\n/**\r\n * @classdesc 字典\r\n * @property {Object} label 标签对象，内部属性名为字典类型名称\r\n * @property {Object} dict 字段数组，内部属性名为字典类型名称\r\n * @property {Array.<DictMeta>} _dictMetas 字典元数据数组\r\n */\r\nexport default class Dict {\r\n  constructor() {\r\n    this.owner = null\r\n    this.label = {}\r\n    this.type = {}\r\n  }\r\n\r\n  init(options) {\r\n    if (options instanceof Array) {\r\n      options = { types: options }\r\n    }\r\n    const opts = mergeRecursive(DEFAULT_DICT_OPTIONS, options)\r\n    if (opts.types === undefined) {\r\n      throw new Error('need dict types')\r\n    }\r\n    const ps = []\r\n    this._dictMetas = opts.types.map(t => DictMeta.parse(t))\r\n    this._dictMetas.forEach(dictMeta => {\r\n      const type = dictMeta.type\r\n      Vue.set(this.label, type, {})\r\n      Vue.set(this.type, type, [])\r\n      if (dictMeta.lazy) {\r\n        return\r\n      }\r\n      ps.push(loadDict(this, dictMeta))\r\n    })\r\n    return Promise.all(ps)\r\n  }\r\n\r\n  /**\r\n   * 重新加载字典\r\n   * @param {String} type 字典类型\r\n   */\r\n  reloadDict(type) {\r\n    const dictMeta = this._dictMetas.find(e => e.type === type)\r\n    if (dictMeta === undefined) {\r\n      return Promise.reject(`the dict meta of ${type} was not found`)\r\n    }\r\n    return loadDict(this, dictMeta)\r\n  }\r\n}\r\n\r\n/**\r\n * 加载字典\r\n * @param {Dict} dict 字典\r\n * @param {DictMeta} dictMeta 字典元数据\r\n * @returns {Promise}\r\n */\r\nfunction loadDict(dict, dictMeta) {\r\n  return dictMeta.request(dictMeta)\r\n    .then(response => {\r\n      const type = dictMeta.type\r\n      let dicts = dictMeta.responseConverter(response, dictMeta)\r\n      if (!(dicts instanceof Array)) {\r\n        console.error('the return of responseConverter must be Array.<DictData>')\r\n        dicts = []\r\n      } else if (dicts.filter(d => d instanceof DictData).length !== dicts.length) {\r\n        console.error('the type of elements in dicts must be DictData')\r\n        dicts = []\r\n      }\r\n      dict.type[type].splice(0, Number.MAX_SAFE_INTEGER, ...dicts)\r\n      dicts.forEach(d => {\r\n        Vue.set(dict.label[type], d.value, d.label)\r\n      })\r\n      return dicts\r\n    })\r\n}\r\n"]}]}